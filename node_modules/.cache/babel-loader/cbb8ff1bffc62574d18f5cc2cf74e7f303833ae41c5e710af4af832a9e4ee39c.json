{"ast":null,"code":"import { placements } from \"rc-tooltip/es/placements\";\nvar autoAdjustOverflowEnabled = {\n  adjustX: 1,\n  adjustY: 1\n};\nvar autoAdjustOverflowDisabled = {\n  adjustX: 0,\n  adjustY: 0\n};\nvar targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n  if (typeof autoAdjustOverflow === 'boolean') {\n    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n  }\n  return Object.assign(Object.assign({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nfunction getArrowOffset(type, arrowWidth, offset) {\n  switch (type) {\n    case 'top':\n    case 'topLeft':\n    case 'topRight':\n      return [0, -(arrowWidth / 2 + offset)];\n    case 'bottom':\n    case 'bottomLeft':\n    case 'bottomRight':\n      return [0, arrowWidth / 2 + offset];\n    case 'left':\n    case 'leftTop':\n    case 'leftBottom':\n      return [-(arrowWidth / 2 + offset), 0];\n    case 'right':\n    case 'rightTop':\n    case 'rightBottom':\n      return [arrowWidth / 2 + offset, 0];\n    /* istanbul ignore next */\n    default:\n      return [0, 0];\n  }\n}\nfunction vertexCalc(point1, point2) {\n  return [point1[0] + point2[0], point1[1] + point2[1]];\n}\nexport default function getPlacements(config) {\n  var arrowWidth = config.arrowWidth,\n    _config$horizontalArr = config.horizontalArrowShift,\n    horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,\n    _config$verticalArrow = config.verticalArrowShift,\n    verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,\n    autoAdjustOverflow = config.autoAdjustOverflow,\n    arrowPointAtCenter = config.arrowPointAtCenter,\n    offset = config.offset;\n  var halfArrowWidth = arrowWidth / 2;\n  var placementMap = {\n    left: {\n      points: ['cr', 'cl'],\n      offset: [-offset, 0]\n    },\n    right: {\n      points: ['cl', 'cr'],\n      offset: [offset, 0]\n    },\n    top: {\n      points: ['bc', 'tc'],\n      offset: [0, -offset]\n    },\n    bottom: {\n      points: ['tc', 'bc'],\n      offset: [0, offset]\n    },\n    topLeft: {\n      points: ['bl', 'tc'],\n      offset: [-(horizontalArrowShift + halfArrowWidth), -offset]\n    },\n    leftTop: {\n      points: ['tr', 'cl'],\n      offset: [-offset, -(verticalArrowShift + halfArrowWidth)]\n    },\n    topRight: {\n      points: ['br', 'tc'],\n      offset: [horizontalArrowShift + halfArrowWidth, -offset]\n    },\n    rightTop: {\n      points: ['tl', 'cr'],\n      offset: [offset, -(verticalArrowShift + halfArrowWidth)]\n    },\n    bottomRight: {\n      points: ['tr', 'bc'],\n      offset: [horizontalArrowShift + halfArrowWidth, offset]\n    },\n    rightBottom: {\n      points: ['bl', 'cr'],\n      offset: [offset, verticalArrowShift + halfArrowWidth]\n    },\n    bottomLeft: {\n      points: ['tl', 'bc'],\n      offset: [-(horizontalArrowShift + halfArrowWidth), offset]\n    },\n    leftBottom: {\n      points: ['br', 'cl'],\n      offset: [-offset, verticalArrowShift + halfArrowWidth]\n    }\n  };\n  Object.keys(placementMap).forEach(function (key) {\n    placementMap[key] = arrowPointAtCenter ? Object.assign(Object.assign({}, placementMap[key]), {\n      offset: vertexCalc(placementMap[key].offset, getArrowOffset(key, arrowWidth, offset)),\n      overflow: getOverflowOptions(autoAdjustOverflow),\n      targetOffset: targetOffset\n    }) : Object.assign(Object.assign({}, placements[key]), {\n      offset: vertexCalc(placements[key].offset, getArrowOffset(key, arrowWidth, offset)),\n      overflow: getOverflowOptions(autoAdjustOverflow)\n    });\n    placementMap[key].ignoreShake = true;\n  });\n  return placementMap;\n}","map":{"version":3,"names":["placements","autoAdjustOverflowEnabled","adjustX","adjustY","autoAdjustOverflowDisabled","targetOffset","getOverflowOptions","autoAdjustOverflow","Object","assign","getArrowOffset","type","arrowWidth","offset","vertexCalc","point1","point2","getPlacements","config","_config$horizontalArr","horizontalArrowShift","_config$verticalArrow","verticalArrowShift","arrowPointAtCenter","halfArrowWidth","placementMap","left","points","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","keys","forEach","key","overflow","ignoreShake"],"sources":["C:/Users/NUC/my-project/node_modules/antd/es/_util/placements.js"],"sourcesContent":["import { placements } from \"rc-tooltip/es/placements\";\nconst autoAdjustOverflowEnabled = {\n  adjustX: 1,\n  adjustY: 1\n};\nconst autoAdjustOverflowDisabled = {\n  adjustX: 0,\n  adjustY: 0\n};\nconst targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n  if (typeof autoAdjustOverflow === 'boolean') {\n    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n  }\n  return Object.assign(Object.assign({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nfunction getArrowOffset(type, arrowWidth, offset) {\n  switch (type) {\n    case 'top':\n    case 'topLeft':\n    case 'topRight':\n      return [0, -(arrowWidth / 2 + offset)];\n    case 'bottom':\n    case 'bottomLeft':\n    case 'bottomRight':\n      return [0, arrowWidth / 2 + offset];\n    case 'left':\n    case 'leftTop':\n    case 'leftBottom':\n      return [-(arrowWidth / 2 + offset), 0];\n    case 'right':\n    case 'rightTop':\n    case 'rightBottom':\n      return [arrowWidth / 2 + offset, 0];\n    /* istanbul ignore next */\n    default:\n      return [0, 0];\n  }\n}\nfunction vertexCalc(point1, point2) {\n  return [point1[0] + point2[0], point1[1] + point2[1]];\n}\nexport default function getPlacements(config) {\n  const {\n    arrowWidth,\n    horizontalArrowShift = 16,\n    verticalArrowShift = 8,\n    autoAdjustOverflow,\n    arrowPointAtCenter,\n    offset\n  } = config;\n  const halfArrowWidth = arrowWidth / 2;\n  const placementMap = {\n    left: {\n      points: ['cr', 'cl'],\n      offset: [-offset, 0]\n    },\n    right: {\n      points: ['cl', 'cr'],\n      offset: [offset, 0]\n    },\n    top: {\n      points: ['bc', 'tc'],\n      offset: [0, -offset]\n    },\n    bottom: {\n      points: ['tc', 'bc'],\n      offset: [0, offset]\n    },\n    topLeft: {\n      points: ['bl', 'tc'],\n      offset: [-(horizontalArrowShift + halfArrowWidth), -offset]\n    },\n    leftTop: {\n      points: ['tr', 'cl'],\n      offset: [-offset, -(verticalArrowShift + halfArrowWidth)]\n    },\n    topRight: {\n      points: ['br', 'tc'],\n      offset: [horizontalArrowShift + halfArrowWidth, -offset]\n    },\n    rightTop: {\n      points: ['tl', 'cr'],\n      offset: [offset, -(verticalArrowShift + halfArrowWidth)]\n    },\n    bottomRight: {\n      points: ['tr', 'bc'],\n      offset: [horizontalArrowShift + halfArrowWidth, offset]\n    },\n    rightBottom: {\n      points: ['bl', 'cr'],\n      offset: [offset, verticalArrowShift + halfArrowWidth]\n    },\n    bottomLeft: {\n      points: ['tl', 'bc'],\n      offset: [-(horizontalArrowShift + halfArrowWidth), offset]\n    },\n    leftBottom: {\n      points: ['br', 'cl'],\n      offset: [-offset, verticalArrowShift + halfArrowWidth]\n    }\n  };\n  Object.keys(placementMap).forEach(key => {\n    placementMap[key] = arrowPointAtCenter ? Object.assign(Object.assign({}, placementMap[key]), {\n      offset: vertexCalc(placementMap[key].offset, getArrowOffset(key, arrowWidth, offset)),\n      overflow: getOverflowOptions(autoAdjustOverflow),\n      targetOffset\n    }) : Object.assign(Object.assign({}, placements[key]), {\n      offset: vertexCalc(placements[key].offset, getArrowOffset(key, arrowWidth, offset)),\n      overflow: getOverflowOptions(autoAdjustOverflow)\n    });\n    placementMap[key].ignoreShake = true;\n  });\n  return placementMap;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}